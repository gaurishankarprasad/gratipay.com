"""Endpoint to record team memberships.
"""
from decimal import Decimal, InvalidOperation

from aspen import Response
from babel.numbers import NumberFormatError
from gratipay.utils import get_participant
from gratipay.models.participant import Participant

ZERO = Decimal('0.00')
A_PENNY = Decimal('0.01')

[--------------------]
website.redirect('..')  # XXX Migrating to Teams! Fix this up!
request.allow('GET', 'POST')
team = get_participant(state, restrict=False)
if not team.show_as_team(user):
    raise Response(404)

member = Participant.from_username(request.path['membername'])
if member is None or member.is_suspicious:
    raise Response(404, _("User not found."))
is_member = member.member_of(team)

if request.method == 'POST':

    if user.participant not in (member, team):
        raise Response(403)

    try:
        take = parse_decimal(request.body['take'])
    except (InvalidOperation, NumberFormatError):
        raise Response(400, _("That's not a valid number"))

    if member == team:
        raise Response(400, _("A team can't take from itself"))

    msg = None
    out = {}

    if user.participant == team:

        # The team itself can only add new members, which means setting their
        # take to a penny, and remove members, which means setting it to zero.
        # Only members themselves can set their take to something greater than
        # a penny.

        if take not in (ZERO, A_PENNY):
            raise Response(400, _("You're only allowed to add or remove members, "
                                  "you can't set their takes to specific amounts."))
        if take == ZERO:
            if is_member:
                if request.body.get('confirmed'):
                    team.remove_member(member)
                else:
                    out['confirm'] = _(
                        "Are you sure you want to remove {0} from this team?",
                        member.username
                    )
            msg = _("{0} has been removed from the team.", member.username)
        elif not member.is_claimed:
            # Attempted to add a stub participant
            raise Response(403)

        if take == A_PENNY:
            if is_member:
                msg = _("{0} is already a member of this team.", member.username)
            else:
                team.add_member(member)
                msg = _("{0} has been added to the team.", member.username)

    elif is_member:
        if take == ZERO and not request.body.get('confirmed'):
            out['confirm'] = _("Are you sure you want to leave this team?")
        else:
            new_take = team.set_take_for(member, take, user.participant)
            new_take_str = format_currency(new_take, 'USD')
            if new_take < take:
                msg = _("Your take is now {0} (you can't go higher this week).",
                        new_take_str)
            else:
                msg = _("Your take is now {0}.", new_take_str)

    else:
        # Only the team itself can add new members.
        raise Response(403)

    if 'confirm' not in out:
        out['members'] = team.get_members(user.participant)
        out['success'] = msg

else:
    if member == team:
        out = team.get_team_take()
        out['username'] = out.pop('member')
        out['take'] = unicode(out.pop('amount'))
    else:
        SQL = "SELECT ctime, mtime, member AS username, amount::text as take " \
              "FROM current_takes WHERE team=%s AND member=%s"
        out = website.db.one(SQL, (team.username, member.username))

[---] application/json via json_dump
out
